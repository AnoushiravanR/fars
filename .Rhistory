fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(1, 2013)
library(devtools)
getwd()
#' @return This function returns a tibble. If there are parsing problems, a
#'  warning tells you how many, and you can retrieve the details with
#'  \code{\link[readr]{problems()}}
#'
#' @examples
#' fars_read("accident_2013.csv")
#' fars_read("accident_2014.csv")
#' fars_read("accident_2015.csv")
#'
#' @export
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#'
#' @note Because formats \code{d} can only be used for integer values or sometimes
#'  for logical values, the function use \code{\link[base]{as.integer}} to turn the
#'  entry for \code{year} argument into integer value.
#'
#' @examples
#' make_filename(2013)
#' make_filename(c(2014, 2015))
#'
#' @export
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
make_filename(2013)
fars_read
fars_read("accident_2013.csv.bz2")
use_data(accident_2013.csv, internal = TRUE)
use_data(accident_2013.csv.bz2, internal = TRUE)
data("accident_2013.csv")
data("accident_2013.csv.bz2")
accident_2013
accident_2013 <- readr::read_csv("accident_2013.csv")
accident_2013 <- readr::read_csv(accident_2013.csv)
accident_2013 <- readr::read_csv("~/accident_2013.csv")
#' @return This function returns a tibble. If there are parsing problems, a
#'  warning tells you how many, and you can retrieve the details with
#'  \code{\link[readr]{problems()}}
#'
#' @examples
#' fars_read("accident_2013.csv")
#' fars_read("accident_2014.csv")
#' fars_read("accident_2015.csv")
#'
#' @export
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#'
#' @note Because formats \code{d} can only be used for integer values or sometimes
#'  for logical values, the function use \code{\link[base]{as.integer}} to turn the
#'  entry for \code{year} argument into integer value.
#'
#' @examples
#' make_filename(2013)
#' make_filename(c(2014, 2015))
#'
#' @export
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
make_filename(2013)
accident_2013 <- readr::read_csv("accident_2013.csv.bz2")
accident_2014 <- readr::read_csv("accident_2014.csv.bz2")
accident_2013 <- readr::read_csv("accident_2013.csv.bz2")
accident_2014 <- readr::read_csv("accident_2014.csv.bz2")
accident_2015 <- readr::read_csv("accident_2015.csv.bz2")
use_data(accident_2013, accident_2014, accident_2015)
data(data)
data("accident_2013")
accident_2013
use_data(accident_2013, accident_2014, accident_2015)
data("accident_2013")
use_data(accident_2013, accident_2014, accident_2015)
#' @return A list with \code{x} and \code{y} range and \code{names} components.
#'
#' @note Since the values of \code{STATE} in datasets are numeric, the function use
#'  \code{\link[base]{as.integer}} to coerce the value of the argument \code{state.num}
#'  into integer.
#'
#' @examples
#'  fars_map_state(17, 2015)
#'
#' @export
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(1, 2013)
data("accident_2014")
data("accident_2013")
accident_2013
data("accident_2014")
View(accident_2014)
#'  it into a tibble.
#'
#' @return This function returns a tibble.
#'
#' @examples
#' fars_read("accident_2013.csv")
#' fars_read("accident_2014.csv")
#' fars_read("accident_2015.csv")
#'
#' @export
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read("accident_2013.csv")
fars_read("accident_2013.csv.bz2")
fars_read("accident_2013")
#'
#' @note Because formats \code{d} can only be used for integer values or sometimes
#'  for logical values, the function use \code{\link[base]{as.integer}} to turn the
#'  entry for \code{year} argument into integer value.
#'
#' @examples
#' make_filename(2013)
#' make_filename(c(2014, 2015))
#'
#' @export
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
make_filename(2013)
fars_read("accident_2013.csv.bz2")
fars_read("accident_2013.rda")
fars_read(data("accident_2013"))
accident_2013
file.exists(accident_2013)
file.exists("accident_2013")
readr::read_csv(".data/accident_2014")
readr::read_csv("/data/accident_2014")
readr::read_csv("/data/accident_2014.rda")
data("accident_2013")
#'
#' @return This function returns a tibble.
#'
#' @examples
#' \dontrun{
#' fars_read("accident_2013.csv")
#' fars_read("accident_2014.csv")
#' fars_read("accident_2015.csv")
#' }
#' @export
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#'
#' @note Because formats \code{d} can only be used for integer values or sometimes
#'  for logical values, the function use \code{\link[base]{as.integer}} to turn the
#'  entry for \code{year} argument into integer value.
#'
#' @examples
#' make_filename(2013)
#' make_filename(c(2014, 2015))
#'
#' @export
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
#'  2 columns, \code{MONTH} and \code{year}.
#'
#' @examples
#' \dontrun{
#'  fars_read_years(2013, 2014, 2015)
#'  }
#'
#' @importFrom dplyr %>%
#'
#' @export
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
#' @return A tibble
#'
#' @examples
#' \dontrunt{
#' fars_summarize_years(c(2013, 2014, 2015))
#' }
#'
#' @importFrom dplyr %>%
#'
#' @export
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
#'
#' @export
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
system.file("extdata", "accident_2013.csv", package = "fars")
system.file("extdata", "accident_2013.csv.bz2", package = "fars")
library(fars)
system.file("extdata", "accident_2013.csv", package = "fars")
system.file("extdata", "2012.csv", package = "testdat")
library(testthat)
system.file("extdata", "2012.csv", package = "testdat")
system.file("extdata/accident_2013.csv.bz2", package = "fars")
system.file("extdata", "2012.csv", package = "testdat")
system.file("extdata/accident_2013.csv.bz2", package = "fars")
system.file("extdata/accident_2013.csv", package = "fars")
devtools::load_all()
devtools::load_all()
system.file("extdata", "accident_2013.csv", package = "fars")
system.file("extdata/accident_2013.csv", package = "fars")
system.file("extdata", "accident_2013.csv.bz2", package = "fars")
library(fars)
setwd(system.file("exdata", package = "fars"))
setwd(system.file("extdata", package = "fars"))
get()
getwd()
library(fars)
system.file("extdata", "accident_2015.csv.bz2", package = "fars")
install.packages("fars")
system.file("extdata", "accident_2015.csv.bz2", package = "fars")
devtools::load_all()
system.file("extdata", "accident_2015.csv.bz2", package = "fars")
devtools::load_all()
system.file("extdata", "accident_2013.csv.bz2", package = "fars")
#'
#' @return This function returns a tibble.
#'
#' @examples
#' \dontrun{
#' fars_read("accident_2013.csv")
#' fars_read("accident_2014.csv")
#' fars_read("accident_2015.csv")
#' }
#' @export
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read("C:/Users/ASUS/Documents/fars/extdata/accident_2013.csv.bz2")
devtools::load_all()
make_filename(2013)
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(2013:2015)
getwd()
setwd(system.file("extdata", package = "fars"))
fars_summarize_years(2013:2015)
setwd(system.file("extdata", package = "fars"))
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(2013:2015)
devtools::load_all()
rm(list = c("fars_summarize_years"))
setwd(system.file("extdata", package = "fars"))
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(2013:2015)
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(2013:2015)
setwd(system.file("extdata", package = "fars"))
fars_read_years(c(2013, 2014, 2015))
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(2013:2015)
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(c(2013, 2014, 2015))
setwd(system.file("extdata", package = "fars"))
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(2013:2015)
#'
#' @export
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(1, 2013)
devtools::document()
devtools::document()
devtools::document()
install.packages("qpdf")
devtools::document()
list.files(system.file("extdata", package = "fars"))
fars::fars_summarize_years(c("accident_2013.csv.bz2", "accident_2014.csv.bz2","accident_2015.csv.bz2"))
fars_summarize_years(2014:2015)
devtools::install_github("fars")
devtools::install_github(fars)
#'  respective years.
#'
#' @return A tibble
#'
#' @examples
#' \dontrun{
#' fars_summarize_years(c(2014, 2015))
#' }
#'
#' @export
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(c(2014, 2015))
#' @return A list with length equal to the length of numeric vector \code{years}
#' in case \code{year} names are correctly provided. Elements of the list are
#' tibbles containing 2 columns, \code{MONTH} and \code{year}.
#'
#' @examples
#' fars_read_years(c(2014, 2015))
#'
#' @importFrom dplyr %>%
#'
#' @export
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_summarize_years(c(2014, 2015))
setwd(system.file("extdata", package = "fars"))
fars_summarize_years(c(2014, 2015))
getwd()
#'
#' @note Because formats \code{d} can only be used for integer values or sometimes
#'  for logical values, the function use \code{\link[base]{as.integer}} to turn the
#'  entry for \code{year} argument into integer value.
#'
#' @examples
#' make_filename(2013)
#' make_filename(c(2014, 2015))
#'
#' @export
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
fars_read("accident_2013.csv.bz2")
getwd()
fars_read_years(2014:2015)
fars_summarize_years(2014:2015)
fars_summarize_years(2014:2015)
fars_summarize_years(2013:2015)
library(dplyr)
fars_summarize_years(2013:2015)
devtools::document()
devtools::document()
devtools::document()
detach("package:dplyr", unload = TRUE)
library(dplyr)
