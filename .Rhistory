tidyr::spread(year, n)
}
fars_summarize_years(c(2013, 2014, 2015))
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013, 2014, 2015))
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013, 2014, 2015))
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013, 2014, 2015))
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(c(2013, 2014, 2015))
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013, 2014, 2015))
library(tidyverse)
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(1, 2013)
library(fars)
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013, 2014, 2015))
library(dplyr)
library(tidyr)
library(readr)
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013, 2014, 2015))
fars_read_years(c(2013, 2014, 2015))
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013, 2014, 2015))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(devtools)
install_github("AnoushiravanR/fars")
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
library(dplyr)
library(tidyr)
library(readr)
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013, 2014, 2015))
library(dplyr)
library(tidyr)
library(readr)
library(magrittr)
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013, 2014, 2015))
#'  2 columns, \code{MONTH} and \code{year}.
#'
#' @examples
#' fars_read_years(c(2013, 2014, 2015))
#'
#' \dontrun{
#'  fars_read_years(2013, 2014, 2015)
#'  }
#'
#'  @export
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013, 2014, 2015))
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013, 2014, 2015))
getwd()
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
make_filename(2013)
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read("accident_2013.csv.bz2")
file.exists("accident_2013.csv.bz2")
fars_read_years("accident_2013.csv.bz2")
fars_read("accident_2013.csv.bz2")
vignette("rmarkdown")
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
filename <- make_filename(2013)
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read(filename)
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
filename <- make_filename(2013)
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read(filename)
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read(filename)
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
filename <- make_filename(2013)
library(dplyr)
library(tidyr)
library(readr)
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read(filename)
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013, 2014, 2015))
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(c(2013, 2014, 2015))
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(1, 2013)
?maps::map
devtools::uses_testthat()
library(devtools)
use_testthat()
library(testthat)
test_that("throwing error", {
expect_that(fars_map_state(2, 2013), throws_error())
})
fars_map_state(2, 2013)
fars_map_state(1, 2013)
test_that("throwing error", {
expect_that(fars_map_state(2, 2013), throws_error())
})
test_that("printing file name", {
expect_that(make_filename(2013), prints_text())
})
load_all()
get(fars, envir = baseenv())
get(make_filename, envir = baseenv())
test_that("printing file name", {
expect_that(make_filename(2013), prints_text())
})
make_filename(2013)
test_that("printing file name", {
expect_that(make_filename(2013), prints_text("accident_2013.csv.bz2"))
})
test_that("throwing error", {
expect_that(fars_map_state(2, 2013), throws_error())
})
test_that("model fitting", {
data(airquality)
fit <- lm(Ozone ~ Wind, data = airquality)
expect_that(fit, is_a("lm"))
expect_that(1 + 1, equals(2))
})
test_that("model fitting", {
data(airquality)
fit <- lm(Ozone ~ Wind, data = airquality)
expect_that(fit, is_a("lm"))
expect_that(1 + 1, equals(2))
})
test_that("printing file name", {
expect_that(make_filename(2013), prints_text())
})
make_filename(2013)
a <- list(1:10, letters)
a
str(a)
expect_error(fars_map_state(2, 2013))
expect_error(fars_map_state(1, 2013))
base <- as.POSIXct("2009-08-03 12:01:59.23", tz = "UTC")
base
lubridate::floor_date(base, "hour")
lubridate::floor_date(base, "minute")
test_that("printing file name", {
expect_that(make_filename(2013), prints_text())
})
fars_map_state(2, 2013)
test_that("throwing error", {
expect_that(fars_map_state(2, 2013), throws_error())
})
test_that("throwing error", {
expect_that(fars_map_state(1, 2013), throws_error())
})
test_that("throwing error", {
expect_that(fars_map_state(2, 2013), throws_error())
})
make_filename(2012)
test_that("erroneous file name", {
expect_that(fars_read("accident_2012.csv.bz2"), throws_error())
})
test_that("erroneous file name", {
expect_that(fars_read("accident_2013.csv.bz2"), throws_error())
})
throws_error(fars_read("accident_2012.csv.bz2"), "file does not exist")
expect_error(fars_read("accident_2012.csv.bz2"), "file does not exist")
expect_error(fars_read("accident_2013.csv.bz2"), "file does not exist")
test_that("invalid years", {
expect_that(fars_read_years(c(2010, 2011)), throws_error())
})
test_that("invalid years", {
expect_that(fars_read_years(c(2013, 2014)), throws_error())
})
test_that("invalid years", {
expect_that(fars_read_years(c(2011, 2012)), throws_error())
})
test_that("invalid years", {
expect_that(fars_read_years(c(2011, 2012)), gives_warning())
})
test_that("invalid years", {
expect_that(fars_read_years(c(2011, 2012)), gives_warning())
})
test_that("invalid years", {
expect_that(fars_read_years(c(2010, 2012)), gives_warning())
})
fars_read_years(c(2011, 2012))
test_that("invalid years", {
expect_that(fars_read_years(c(2013, 2014)), gives_warning())
})
test_that("invalid years", {
expect_that(fars_read_years(years : c(2013, 2014)), gives_warning())
})
fars_read_years(c(2010, 2011))
test_that("invalid years", {
expect_that(fars_read_years(c(2010, 2011)), gives_warning())
})
test_that("throwing error", {
expect_that(fars_map_state(2, 2013), throws_error())
})
document()
rm(list = c("fars_map_state", "fars_read", "fars_read_years", "fars_summarize_years", "make_filename"))
document()
document()
document()
document()
document()
load_all()
document()
document()
use_data()
use_data("accident_2013.csv")
use_data(accident_2013.csv)
use_data_raw(accident_2013.csv)
use_data(accident_2013.csv, accident_2014.csv, accident_2015.csv, compress = "gzip")
use_data(accident_2013.csv, accident_2014.csv, accident_2015.csv, compress = "csv.gz")
use_data(accident_2013.csv, accident_2014.csv, accident_2015.csv)
use_data(accident_2013.csv.gz)
use_data(name = "DATASET", accident_2013.csv)
use_data(accident_2013, accident_2013.csv)
getwd()
use_data(C:/Users/ASUS/Documents/fars/accident_2013.csv)
use_data("C:/Users/ASUS/Documents/fars/accident_2013.csv")
ls()
use_data(accident_2013.csv)
use_data
use_data(accident_2013.csv, internal = FALSE)
system.file("extdata", "2012.csv", package = "fars")
use_data(accident_2013.csv.gz, internal = TRUE)
use_data(accident_2013.csv.bz2)
use_data(accident_2013.csv)
use_data(accident_2013.csv.bz2, internal = TRUE)
use_data(accident_2013.csv.bz2)
use_data(accident_2013.csv.bz2, accident_2014.csv.bz2, accident_2015.csv.bz2)
file.exists("accident_2013.csv.bz2")
use_data(accident_2013.csv.bz2, accident_2014.csv.bz2, accident_2015.csv.bz2)
use_data(accident_2013.csv, accident_2014.csv, accident_2015.csv)
use_data(accident_2013.csv.bz2, accident_2014.csv.bz2, accident_2015.csv.bz2)
load_all()
getwd()
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
